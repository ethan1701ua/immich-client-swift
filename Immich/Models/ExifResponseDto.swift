//
// ExifResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExifResponseDto: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    public var fileSizeInByte: Int64?
    public var make: String?
    public var model: String?
    public var imageName: String?
    public var exifImageWidth: Double?
    public var exifImageHeight: Double?
    public var orientation: String?
    public var dateTimeOriginal: Date?
    public var modifyDate: Date?
    public var lensModel: String?
    public var fNumber: Double?
    public var focalLength: Double?
    public var iso: Double?
    public var exposureTime: Double?
    public var latitude: Double?
    public var longitude: Double?
    public var city: String?
    public var state: String?
    public var country: String?

    public init(id: Int64? = nil, fileSizeInByte: Int64? = nil, make: String? = nil, model: String? = nil, imageName: String? = nil, exifImageWidth: Double? = nil, exifImageHeight: Double? = nil, orientation: String? = nil, dateTimeOriginal: Date? = nil, modifyDate: Date? = nil, lensModel: String? = nil, fNumber: Double? = nil, focalLength: Double? = nil, iso: Double? = nil, exposureTime: Double? = nil, latitude: Double? = nil, longitude: Double? = nil, city: String? = nil, state: String? = nil, country: String? = nil) {
        self.id = id
        self.fileSizeInByte = fileSizeInByte
        self.make = make
        self.model = model
        self.imageName = imageName
        self.exifImageWidth = exifImageWidth
        self.exifImageHeight = exifImageHeight
        self.orientation = orientation
        self.dateTimeOriginal = dateTimeOriginal
        self.modifyDate = modifyDate
        self.lensModel = lensModel
        self.fNumber = fNumber
        self.focalLength = focalLength
        self.iso = iso
        self.exposureTime = exposureTime
        self.latitude = latitude
        self.longitude = longitude
        self.city = city
        self.state = state
        self.country = country
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case fileSizeInByte
        case make
        case model
        case imageName
        case exifImageWidth
        case exifImageHeight
        case orientation
        case dateTimeOriginal
        case modifyDate
        case lensModel
        case fNumber
        case focalLength
        case iso
        case exposureTime
        case latitude
        case longitude
        case city
        case state
        case country
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(fileSizeInByte, forKey: .fileSizeInByte)
        try container.encodeIfPresent(make, forKey: .make)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(imageName, forKey: .imageName)
        try container.encodeIfPresent(exifImageWidth, forKey: .exifImageWidth)
        try container.encodeIfPresent(exifImageHeight, forKey: .exifImageHeight)
        try container.encodeIfPresent(orientation, forKey: .orientation)
        try container.encodeIfPresent(dateTimeOriginal, forKey: .dateTimeOriginal)
        try container.encodeIfPresent(modifyDate, forKey: .modifyDate)
        try container.encodeIfPresent(lensModel, forKey: .lensModel)
        try container.encodeIfPresent(fNumber, forKey: .fNumber)
        try container.encodeIfPresent(focalLength, forKey: .focalLength)
        try container.encodeIfPresent(iso, forKey: .iso)
        try container.encodeIfPresent(exposureTime, forKey: .exposureTime)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(country, forKey: .country)
    }
}

