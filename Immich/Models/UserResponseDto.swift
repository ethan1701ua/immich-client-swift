//
// UserResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserResponseDto: Codable, JSONEncodable, Hashable {

    public var id: String
    public var email: String
    public var firstName: String
    public var lastName: String
    public var createdAt: String
    public var profileImagePath: String
    public var shouldChangePassword: Bool
    public var isAdmin: Bool
    public var deletedAt: Date?
    public var oauthId: String

    public init(id: String, email: String, firstName: String, lastName: String, createdAt: String, profileImagePath: String, shouldChangePassword: Bool, isAdmin: Bool, deletedAt: Date? = nil, oauthId: String) {
        self.id = id
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.createdAt = createdAt
        self.profileImagePath = profileImagePath
        self.shouldChangePassword = shouldChangePassword
        self.isAdmin = isAdmin
        self.deletedAt = deletedAt
        self.oauthId = oauthId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case firstName
        case lastName
        case createdAt
        case profileImagePath
        case shouldChangePassword
        case isAdmin
        case deletedAt
        case oauthId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(email, forKey: .email)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(profileImagePath, forKey: .profileImagePath)
        try container.encode(shouldChangePassword, forKey: .shouldChangePassword)
        try container.encode(isAdmin, forKey: .isAdmin)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encode(oauthId, forKey: .oauthId)
    }
}

