//
// AssetResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AssetResponseDto: Codable, JSONEncodable, Hashable {

    public var type: AssetTypeEnum
    public var id: String
    public var deviceAssetId: String
    public var ownerId: String
    public var deviceId: String
    public var originalPath: String
    public var resizePath: String?
    public var createdAt: String
    public var modifiedAt: String
    public var isFavorite: Bool
    public var mimeType: String?
    public var duration: String
    public var webpPath: String?
    public var encodedVideoPath: String?
    public var exifInfo: ExifResponseDto?
    public var smartInfo: SmartInfoResponseDto?
    public var livePhotoVideoId: String?
    public var tags: [TagResponseDto]

    public init(type: AssetTypeEnum, id: String, deviceAssetId: String, ownerId: String, deviceId: String, originalPath: String, resizePath: String?, createdAt: String, modifiedAt: String, isFavorite: Bool, mimeType: String?, duration: String, webpPath: String?, encodedVideoPath: String? = nil, exifInfo: ExifResponseDto? = nil, smartInfo: SmartInfoResponseDto? = nil, livePhotoVideoId: String? = nil, tags: [TagResponseDto]) {
        self.type = type
        self.id = id
        self.deviceAssetId = deviceAssetId
        self.ownerId = ownerId
        self.deviceId = deviceId
        self.originalPath = originalPath
        self.resizePath = resizePath
        self.createdAt = createdAt
        self.modifiedAt = modifiedAt
        self.isFavorite = isFavorite
        self.mimeType = mimeType
        self.duration = duration
        self.webpPath = webpPath
        self.encodedVideoPath = encodedVideoPath
        self.exifInfo = exifInfo
        self.smartInfo = smartInfo
        self.livePhotoVideoId = livePhotoVideoId
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case id
        case deviceAssetId
        case ownerId
        case deviceId
        case originalPath
        case resizePath
        case createdAt
        case modifiedAt
        case isFavorite
        case mimeType
        case duration
        case webpPath
        case encodedVideoPath
        case exifInfo
        case smartInfo
        case livePhotoVideoId
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encode(deviceAssetId, forKey: .deviceAssetId)
        try container.encode(ownerId, forKey: .ownerId)
        try container.encode(deviceId, forKey: .deviceId)
        try container.encode(originalPath, forKey: .originalPath)
        try container.encode(resizePath, forKey: .resizePath)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(modifiedAt, forKey: .modifiedAt)
        try container.encode(isFavorite, forKey: .isFavorite)
        try container.encode(mimeType, forKey: .mimeType)
        try container.encode(duration, forKey: .duration)
        try container.encode(webpPath, forKey: .webpPath)
        try container.encodeIfPresent(encodedVideoPath, forKey: .encodedVideoPath)
        try container.encodeIfPresent(exifInfo, forKey: .exifInfo)
        try container.encodeIfPresent(smartInfo, forKey: .smartInfo)
        try container.encodeIfPresent(livePhotoVideoId, forKey: .livePhotoVideoId)
        try container.encode(tags, forKey: .tags)
    }
}

