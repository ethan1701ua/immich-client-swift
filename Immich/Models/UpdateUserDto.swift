//
// UpdateUserDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateUserDto: Codable, JSONEncodable, Hashable {

    public var id: String
    public var email: String?
    public var password: String?
    public var firstName: String?
    public var lastName: String?
    public var isAdmin: Bool?
    public var shouldChangePassword: Bool?
    public var profileImagePath: String?

    public init(id: String, email: String? = nil, password: String? = nil, firstName: String? = nil, lastName: String? = nil, isAdmin: Bool? = nil, shouldChangePassword: Bool? = nil, profileImagePath: String? = nil) {
        self.id = id
        self.email = email
        self.password = password
        self.firstName = firstName
        self.lastName = lastName
        self.isAdmin = isAdmin
        self.shouldChangePassword = shouldChangePassword
        self.profileImagePath = profileImagePath
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case password
        case firstName
        case lastName
        case isAdmin
        case shouldChangePassword
        case profileImagePath
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(isAdmin, forKey: .isAdmin)
        try container.encodeIfPresent(shouldChangePassword, forKey: .shouldChangePassword)
        try container.encodeIfPresent(profileImagePath, forKey: .profileImagePath)
    }
}

