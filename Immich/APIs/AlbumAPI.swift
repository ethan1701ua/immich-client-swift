//
// AlbumAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AlbumAPI {

    /**

     - parameter albumId: (path)  
     - parameter addAssetsDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addAssetsToAlbum(albumId: String, addAssetsDto: AddAssetsDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AddAssetsResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return addAssetsToAlbumWithRequestBuilder(albumId: albumId, addAssetsDto: addAssetsDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /album/{albumId}/assets
     - BASIC:
       - type: http
       - name: bearer
     - parameter albumId: (path)  
     - parameter addAssetsDto: (body)  
     - returns: RequestBuilder<AddAssetsResponseDto> 
     */
    open class func addAssetsToAlbumWithRequestBuilder(albumId: String, addAssetsDto: AddAssetsDto) -> RequestBuilder<AddAssetsResponseDto> {
        var localVariablePath = "/album/{albumId}/assets"
        let albumIdPreEscape = "\(APIHelper.mapValueToPathItem(albumId))"
        let albumIdPostEscape = albumIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{albumId}", with: albumIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addAssetsDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddAssetsResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter albumId: (path)  
     - parameter addUsersDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addUsersToAlbum(albumId: String, addUsersDto: AddUsersDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AlbumResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return addUsersToAlbumWithRequestBuilder(albumId: albumId, addUsersDto: addUsersDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /album/{albumId}/users
     - BASIC:
       - type: http
       - name: bearer
     - parameter albumId: (path)  
     - parameter addUsersDto: (body)  
     - returns: RequestBuilder<AlbumResponseDto> 
     */
    open class func addUsersToAlbumWithRequestBuilder(albumId: String, addUsersDto: AddUsersDto) -> RequestBuilder<AlbumResponseDto> {
        var localVariablePath = "/album/{albumId}/users"
        let albumIdPreEscape = "\(APIHelper.mapValueToPathItem(albumId))"
        let albumIdPostEscape = albumIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{albumId}", with: albumIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addUsersDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlbumResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter createAlbumDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createAlbum(createAlbumDto: CreateAlbumDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AlbumResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return createAlbumWithRequestBuilder(createAlbumDto: createAlbumDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /album
     - BASIC:
       - type: http
       - name: bearer
     - parameter createAlbumDto: (body)  
     - returns: RequestBuilder<AlbumResponseDto> 
     */
    open class func createAlbumWithRequestBuilder(createAlbumDto: CreateAlbumDto) -> RequestBuilder<AlbumResponseDto> {
        let localVariablePath = "/album"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAlbumDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlbumResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter albumId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteAlbum(albumId: String, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteAlbumWithRequestBuilder(albumId: albumId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /album/{albumId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter albumId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAlbumWithRequestBuilder(albumId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/album/{albumId}"
        let albumIdPreEscape = "\(APIHelper.mapValueToPathItem(albumId))"
        let albumIdPostEscape = albumIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{albumId}", with: albumIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ImmichAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter albumId: (path)  
     - parameter skip: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func downloadArchive(albumId: String, skip: Double? = nil, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return downloadArchiveWithRequestBuilder(albumId: albumId, skip: skip).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /album/{albumId}/download
     - BASIC:
       - type: http
       - name: bearer
     - parameter albumId: (path)  
     - parameter skip: (query)  (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func downloadArchiveWithRequestBuilder(albumId: String, skip: Double? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/album/{albumId}/download"
        let albumIdPreEscape = "\(APIHelper.mapValueToPathItem(albumId))"
        let albumIdPostEscape = albumIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{albumId}", with: albumIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAlbumCountByUserId(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AlbumCountResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getAlbumCountByUserIdWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /album/count-by-user-id
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<AlbumCountResponseDto> 
     */
    open class func getAlbumCountByUserIdWithRequestBuilder() -> RequestBuilder<AlbumCountResponseDto> {
        let localVariablePath = "/album/count-by-user-id"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlbumCountResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter albumId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAlbumInfo(albumId: String, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AlbumResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getAlbumInfoWithRequestBuilder(albumId: albumId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /album/{albumId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter albumId: (path)  
     - returns: RequestBuilder<AlbumResponseDto> 
     */
    open class func getAlbumInfoWithRequestBuilder(albumId: String) -> RequestBuilder<AlbumResponseDto> {
        var localVariablePath = "/album/{albumId}"
        let albumIdPreEscape = "\(APIHelper.mapValueToPathItem(albumId))"
        let albumIdPostEscape = albumIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{albumId}", with: albumIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlbumResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter shared: (query)  (optional)
     - parameter assetId: (query) Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllAlbums(shared: Bool? = nil, assetId: String? = nil, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: [AlbumResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllAlbumsWithRequestBuilder(shared: shared, assetId: assetId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /album
     - BASIC:
       - type: http
       - name: bearer
     - parameter shared: (query)  (optional)
     - parameter assetId: (query) Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)
     - returns: RequestBuilder<[AlbumResponseDto]> 
     */
    open class func getAllAlbumsWithRequestBuilder(shared: Bool? = nil, assetId: String? = nil) -> RequestBuilder<[AlbumResponseDto]> {
        let localVariablePath = "/album"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "shared": (wrappedValue: shared?.encodeToJSON(), isExplode: true),
            "assetId": (wrappedValue: assetId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AlbumResponseDto]>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter albumId: (path)  
     - parameter removeAssetsDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeAssetFromAlbum(albumId: String, removeAssetsDto: RemoveAssetsDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AlbumResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return removeAssetFromAlbumWithRequestBuilder(albumId: albumId, removeAssetsDto: removeAssetsDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /album/{albumId}/assets
     - BASIC:
       - type: http
       - name: bearer
     - parameter albumId: (path)  
     - parameter removeAssetsDto: (body)  
     - returns: RequestBuilder<AlbumResponseDto> 
     */
    open class func removeAssetFromAlbumWithRequestBuilder(albumId: String, removeAssetsDto: RemoveAssetsDto) -> RequestBuilder<AlbumResponseDto> {
        var localVariablePath = "/album/{albumId}/assets"
        let albumIdPreEscape = "\(APIHelper.mapValueToPathItem(albumId))"
        let albumIdPostEscape = albumIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{albumId}", with: albumIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: removeAssetsDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlbumResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter albumId: (path)  
     - parameter userId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeUserFromAlbum(albumId: String, userId: String, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return removeUserFromAlbumWithRequestBuilder(albumId: albumId, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /album/{albumId}/user/{userId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter albumId: (path)  
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func removeUserFromAlbumWithRequestBuilder(albumId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/album/{albumId}/user/{userId}"
        let albumIdPreEscape = "\(APIHelper.mapValueToPathItem(albumId))"
        let albumIdPostEscape = albumIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{albumId}", with: albumIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ImmichAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter albumId: (path)  
     - parameter updateAlbumDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateAlbumInfo(albumId: String, updateAlbumDto: UpdateAlbumDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AlbumResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return updateAlbumInfoWithRequestBuilder(albumId: albumId, updateAlbumDto: updateAlbumDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /album/{albumId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter albumId: (path)  
     - parameter updateAlbumDto: (body)  
     - returns: RequestBuilder<AlbumResponseDto> 
     */
    open class func updateAlbumInfoWithRequestBuilder(albumId: String, updateAlbumDto: UpdateAlbumDto) -> RequestBuilder<AlbumResponseDto> {
        var localVariablePath = "/album/{albumId}"
        let albumIdPreEscape = "\(APIHelper.mapValueToPathItem(albumId))"
        let albumIdPostEscape = albumIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{albumId}", with: albumIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateAlbumDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlbumResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
