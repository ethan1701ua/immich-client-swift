//
// SystemConfigAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SystemConfigAPI {

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConfig(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: SystemConfigDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getConfigWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /system-config
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<SystemConfigDto> 
     */
    open class func getConfigWithRequestBuilder() -> RequestBuilder<SystemConfigDto> {
        let localVariablePath = "/system-config"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SystemConfigDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDefaults(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: SystemConfigDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getDefaultsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /system-config/defaults
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<SystemConfigDto> 
     */
    open class func getDefaultsWithRequestBuilder() -> RequestBuilder<SystemConfigDto> {
        let localVariablePath = "/system-config/defaults"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SystemConfigDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStorageTemplateOptions(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: SystemConfigTemplateStorageOptionDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getStorageTemplateOptionsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /system-config/storage-template-options
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<SystemConfigTemplateStorageOptionDto> 
     */
    open class func getStorageTemplateOptionsWithRequestBuilder() -> RequestBuilder<SystemConfigTemplateStorageOptionDto> {
        let localVariablePath = "/system-config/storage-template-options"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SystemConfigTemplateStorageOptionDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter systemConfigDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateConfig(systemConfigDto: SystemConfigDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: SystemConfigDto?, _ error: Error?) -> Void)) -> RequestTask {
        return updateConfigWithRequestBuilder(systemConfigDto: systemConfigDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /system-config
     - BASIC:
       - type: http
       - name: bearer
     - parameter systemConfigDto: (body)  
     - returns: RequestBuilder<SystemConfigDto> 
     */
    open class func updateConfigWithRequestBuilder(systemConfigDto: SystemConfigDto) -> RequestBuilder<SystemConfigDto> {
        let localVariablePath = "/system-config"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: systemConfigDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SystemConfigDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
