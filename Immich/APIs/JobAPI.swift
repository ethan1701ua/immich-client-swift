//
// JobAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class JobAPI {

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllJobsStatus(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AllJobStatusResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllJobsStatusWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /jobs
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<AllJobStatusResponseDto> 
     */
    open class func getAllJobsStatusWithRequestBuilder() -> RequestBuilder<AllJobStatusResponseDto> {
        let localVariablePath = "/jobs"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AllJobStatusResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter jobId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getJobStatus(jobId: JobId, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: JobStatusResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getJobStatusWithRequestBuilder(jobId: jobId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /jobs/{jobId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter jobId: (path)  
     - returns: RequestBuilder<JobStatusResponseDto> 
     */
    open class func getJobStatusWithRequestBuilder(jobId: JobId) -> RequestBuilder<JobStatusResponseDto> {
        var localVariablePath = "/jobs/{jobId}"
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JobStatusResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter jobId: (path)  
     - parameter jobCommandDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sendJobCommand(jobId: JobId, jobCommandDto: JobCommandDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: Double?, _ error: Error?) -> Void)) -> RequestTask {
        return sendJobCommandWithRequestBuilder(jobId: jobId, jobCommandDto: jobCommandDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /jobs/{jobId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter jobId: (path)  
     - parameter jobCommandDto: (body)  
     - returns: RequestBuilder<Double> 
     */
    open class func sendJobCommandWithRequestBuilder(jobId: JobId, jobCommandDto: JobCommandDto) -> RequestBuilder<Double> {
        var localVariablePath = "/jobs/{jobId}"
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jobCommandDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Double>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
