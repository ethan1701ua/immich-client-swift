//
// DeviceInfoAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DeviceInfoAPI {

    /**

     - parameter upsertDeviceInfoDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createDeviceInfo(upsertDeviceInfoDto: UpsertDeviceInfoDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: DeviceInfoResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return createDeviceInfoWithRequestBuilder(upsertDeviceInfoDto: upsertDeviceInfoDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /device-info
     - @deprecated
     - BASIC:
       - type: http
       - name: bearer
     - parameter upsertDeviceInfoDto: (body)  
     - returns: RequestBuilder<DeviceInfoResponseDto> 
     */
    open class func createDeviceInfoWithRequestBuilder(upsertDeviceInfoDto: UpsertDeviceInfoDto) -> RequestBuilder<DeviceInfoResponseDto> {
        let localVariablePath = "/device-info"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: upsertDeviceInfoDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeviceInfoResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter upsertDeviceInfoDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateDeviceInfo(upsertDeviceInfoDto: UpsertDeviceInfoDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: DeviceInfoResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return updateDeviceInfoWithRequestBuilder(upsertDeviceInfoDto: upsertDeviceInfoDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /device-info
     - @deprecated
     - BASIC:
       - type: http
       - name: bearer
     - parameter upsertDeviceInfoDto: (body)  
     - returns: RequestBuilder<DeviceInfoResponseDto> 
     */
    open class func updateDeviceInfoWithRequestBuilder(upsertDeviceInfoDto: UpsertDeviceInfoDto) -> RequestBuilder<DeviceInfoResponseDto> {
        let localVariablePath = "/device-info"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: upsertDeviceInfoDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeviceInfoResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter upsertDeviceInfoDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func upsertDeviceInfo(upsertDeviceInfoDto: UpsertDeviceInfoDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: DeviceInfoResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return upsertDeviceInfoWithRequestBuilder(upsertDeviceInfoDto: upsertDeviceInfoDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /device-info
     - BASIC:
       - type: http
       - name: bearer
     - parameter upsertDeviceInfoDto: (body)  
     - returns: RequestBuilder<DeviceInfoResponseDto> 
     */
    open class func upsertDeviceInfoWithRequestBuilder(upsertDeviceInfoDto: UpsertDeviceInfoDto) -> RequestBuilder<DeviceInfoResponseDto> {
        let localVariablePath = "/device-info"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: upsertDeviceInfoDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeviceInfoResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
