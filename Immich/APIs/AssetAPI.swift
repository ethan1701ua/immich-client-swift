//
// AssetAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AssetAPI {

    /**

     - parameter checkDuplicateAssetDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func checkDuplicateAsset(checkDuplicateAssetDto: CheckDuplicateAssetDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: CheckDuplicateAssetResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return checkDuplicateAssetWithRequestBuilder(checkDuplicateAssetDto: checkDuplicateAssetDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /asset/check
     - Check duplicated asset before uploading - for Web upload used
     - BASIC:
       - type: http
       - name: bearer
     - parameter checkDuplicateAssetDto: (body)  
     - returns: RequestBuilder<CheckDuplicateAssetResponseDto> 
     */
    open class func checkDuplicateAssetWithRequestBuilder(checkDuplicateAssetDto: CheckDuplicateAssetDto) -> RequestBuilder<CheckDuplicateAssetResponseDto> {
        let localVariablePath = "/asset/check"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: checkDuplicateAssetDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckDuplicateAssetResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter checkExistingAssetsDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func checkExistingAssets(checkExistingAssetsDto: CheckExistingAssetsDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: CheckExistingAssetsResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return checkExistingAssetsWithRequestBuilder(checkExistingAssetsDto: checkExistingAssetsDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /asset/exist
     - Checks if multiple assets exist on the server and returns all existing - used by background backup
     - BASIC:
       - type: http
       - name: bearer
     - parameter checkExistingAssetsDto: (body)  
     - returns: RequestBuilder<CheckExistingAssetsResponseDto> 
     */
    open class func checkExistingAssetsWithRequestBuilder(checkExistingAssetsDto: CheckExistingAssetsDto) -> RequestBuilder<CheckExistingAssetsResponseDto> {
        let localVariablePath = "/asset/exist"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: checkExistingAssetsDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckExistingAssetsResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter deleteAssetDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteAsset(deleteAssetDto: DeleteAssetDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: [DeleteAssetResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteAssetWithRequestBuilder(deleteAssetDto: deleteAssetDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /asset
     - BASIC:
       - type: http
       - name: bearer
     - parameter deleteAssetDto: (body)  
     - returns: RequestBuilder<[DeleteAssetResponseDto]> 
     */
    open class func deleteAssetWithRequestBuilder(deleteAssetDto: DeleteAssetDto) -> RequestBuilder<[DeleteAssetResponseDto]> {
        let localVariablePath = "/asset"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteAssetDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DeleteAssetResponseDto]>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter assetId: (path)  
     - parameter isThumb: (query)  (optional)
     - parameter isWeb: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func downloadFile(assetId: String, isThumb: Bool? = nil, isWeb: Bool? = nil, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return downloadFileWithRequestBuilder(assetId: assetId, isThumb: isThumb, isWeb: isWeb).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/download/{assetId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter assetId: (path)  
     - parameter isThumb: (query)  (optional)
     - parameter isWeb: (query)  (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func downloadFileWithRequestBuilder(assetId: String, isThumb: Bool? = nil, isWeb: Bool? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/asset/download/{assetId}"
        let assetIdPreEscape = "\(APIHelper.mapValueToPathItem(assetId))"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assetId}", with: assetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isThumb": (wrappedValue: isThumb?.encodeToJSON(), isExplode: true),
            "isWeb": (wrappedValue: isWeb?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter skip: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func downloadLibrary(skip: Double? = nil, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return downloadLibraryWithRequestBuilder(skip: skip).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/download-library
     - BASIC:
       - type: http
       - name: bearer
     - parameter skip: (query)  (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func downloadLibraryWithRequestBuilder(skip: Double? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/asset/download-library"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter ifNoneMatch: (header) ETag of data already cached on the client (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllAssets(ifNoneMatch: String? = nil, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: [AssetResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllAssetsWithRequestBuilder(ifNoneMatch: ifNoneMatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset
     - Get all AssetEntity belong to the user
     - BASIC:
       - type: http
       - name: bearer
     - parameter ifNoneMatch: (header) ETag of data already cached on the client (optional)
     - returns: RequestBuilder<[AssetResponseDto]> 
     */
    open class func getAllAssetsWithRequestBuilder(ifNoneMatch: String? = nil) -> RequestBuilder<[AssetResponseDto]> {
        let localVariablePath = "/asset"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "if-none-match": ifNoneMatch?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AssetResponseDto]>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter assetId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAssetById(assetId: String, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AssetResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getAssetByIdWithRequestBuilder(assetId: assetId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/assetById/{assetId}
     - Get a single asset's information
     - BASIC:
       - type: http
       - name: bearer
     - parameter assetId: (path)  
     - returns: RequestBuilder<AssetResponseDto> 
     */
    open class func getAssetByIdWithRequestBuilder(assetId: String) -> RequestBuilder<AssetResponseDto> {
        var localVariablePath = "/asset/assetById/{assetId}"
        let assetIdPreEscape = "\(APIHelper.mapValueToPathItem(assetId))"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assetId}", with: assetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter getAssetByTimeBucketDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAssetByTimeBucket(getAssetByTimeBucketDto: GetAssetByTimeBucketDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: [AssetResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAssetByTimeBucketWithRequestBuilder(getAssetByTimeBucketDto: getAssetByTimeBucketDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /asset/time-bucket
     - BASIC:
       - type: http
       - name: bearer
     - parameter getAssetByTimeBucketDto: (body)  
     - returns: RequestBuilder<[AssetResponseDto]> 
     */
    open class func getAssetByTimeBucketWithRequestBuilder(getAssetByTimeBucketDto: GetAssetByTimeBucketDto) -> RequestBuilder<[AssetResponseDto]> {
        let localVariablePath = "/asset/time-bucket"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getAssetByTimeBucketDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AssetResponseDto]>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter getAssetCountByTimeBucketDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAssetCountByTimeBucket(getAssetCountByTimeBucketDto: GetAssetCountByTimeBucketDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AssetCountByTimeBucketResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getAssetCountByTimeBucketWithRequestBuilder(getAssetCountByTimeBucketDto: getAssetCountByTimeBucketDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /asset/count-by-time-bucket
     - BASIC:
       - type: http
       - name: bearer
     - parameter getAssetCountByTimeBucketDto: (body)  
     - returns: RequestBuilder<AssetCountByTimeBucketResponseDto> 
     */
    open class func getAssetCountByTimeBucketWithRequestBuilder(getAssetCountByTimeBucketDto: GetAssetCountByTimeBucketDto) -> RequestBuilder<AssetCountByTimeBucketResponseDto> {
        let localVariablePath = "/asset/count-by-time-bucket"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getAssetCountByTimeBucketDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetCountByTimeBucketResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAssetCountByUserId(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AssetCountByUserIdResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getAssetCountByUserIdWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/count-by-user-id
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<AssetCountByUserIdResponseDto> 
     */
    open class func getAssetCountByUserIdWithRequestBuilder() -> RequestBuilder<AssetCountByUserIdResponseDto> {
        let localVariablePath = "/asset/count-by-user-id"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetCountByUserIdResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAssetSearchTerms(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAssetSearchTermsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/search-terms
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<[String]> 
     */
    open class func getAssetSearchTermsWithRequestBuilder() -> RequestBuilder<[String]> {
        let localVariablePath = "/asset/search-terms"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter assetId: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAssetThumbnail(assetId: String, format: ThumbnailFormat? = nil, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getAssetThumbnailWithRequestBuilder(assetId: assetId, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/thumbnail/{assetId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter assetId: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getAssetThumbnailWithRequestBuilder(assetId: String, format: ThumbnailFormat? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/asset/thumbnail/{assetId}"
        let assetIdPreEscape = "\(APIHelper.mapValueToPathItem(assetId))"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assetId}", with: assetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCuratedLocations(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: [CuratedLocationsResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return getCuratedLocationsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/curated-locations
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<[CuratedLocationsResponseDto]> 
     */
    open class func getCuratedLocationsWithRequestBuilder() -> RequestBuilder<[CuratedLocationsResponseDto]> {
        let localVariablePath = "/asset/curated-locations"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CuratedLocationsResponseDto]>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCuratedObjects(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: [CuratedObjectsResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return getCuratedObjectsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/curated-objects
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<[CuratedObjectsResponseDto]> 
     */
    open class func getCuratedObjectsWithRequestBuilder() -> RequestBuilder<[CuratedObjectsResponseDto]> {
        let localVariablePath = "/asset/curated-objects"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CuratedObjectsResponseDto]>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter deviceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserAssetsByDeviceId(deviceId: String, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserAssetsByDeviceIdWithRequestBuilder(deviceId: deviceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/{deviceId}
     - Get all asset of a device that are in the database, ID only.
     - BASIC:
       - type: http
       - name: bearer
     - parameter deviceId: (path)  
     - returns: RequestBuilder<[String]> 
     */
    open class func getUserAssetsByDeviceIdWithRequestBuilder(deviceId: String) -> RequestBuilder<[String]> {
        var localVariablePath = "/asset/{deviceId}"
        let deviceIdPreEscape = "\(APIHelper.mapValueToPathItem(deviceId))"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter searchAssetDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchAsset(searchAssetDto: SearchAssetDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: [AssetResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return searchAssetWithRequestBuilder(searchAssetDto: searchAssetDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /asset/search
     - BASIC:
       - type: http
       - name: bearer
     - parameter searchAssetDto: (body)  
     - returns: RequestBuilder<[AssetResponseDto]> 
     */
    open class func searchAssetWithRequestBuilder(searchAssetDto: SearchAssetDto) -> RequestBuilder<[AssetResponseDto]> {
        let localVariablePath = "/asset/search"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchAssetDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AssetResponseDto]>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter assetId: (path)  
     - parameter isThumb: (query)  (optional)
     - parameter isWeb: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serveFile(assetId: String, isThumb: Bool? = nil, isWeb: Bool? = nil, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return serveFileWithRequestBuilder(assetId: assetId, isThumb: isThumb, isWeb: isWeb).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /asset/file/{assetId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter assetId: (path)  
     - parameter isThumb: (query)  (optional)
     - parameter isWeb: (query)  (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func serveFileWithRequestBuilder(assetId: String, isThumb: Bool? = nil, isWeb: Bool? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/asset/file/{assetId}"
        let assetIdPreEscape = "\(APIHelper.mapValueToPathItem(assetId))"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assetId}", with: assetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isThumb": (wrappedValue: isThumb?.encodeToJSON(), isExplode: true),
            "isWeb": (wrappedValue: isWeb?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter assetId: (path)  
     - parameter updateAssetDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateAsset(assetId: String, updateAssetDto: UpdateAssetDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AssetResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return updateAssetWithRequestBuilder(assetId: assetId, updateAssetDto: updateAssetDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /asset/{assetId}
     - Update an asset
     - BASIC:
       - type: http
       - name: bearer
     - parameter assetId: (path)  
     - parameter updateAssetDto: (body)  
     - returns: RequestBuilder<AssetResponseDto> 
     */
    open class func updateAssetWithRequestBuilder(assetId: String, updateAssetDto: UpdateAssetDto) -> RequestBuilder<AssetResponseDto> {
        var localVariablePath = "/asset/{assetId}"
        let assetIdPreEscape = "\(APIHelper.mapValueToPathItem(assetId))"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assetId}", with: assetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateAssetDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter assetData: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func uploadFile(assetData: URL, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: AssetFileUploadResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return uploadFileWithRequestBuilder(assetData: assetData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /asset/upload
     - BASIC:
       - type: http
       - name: bearer
     - parameter assetData: (form)  
     - returns: RequestBuilder<AssetFileUploadResponseDto> 
     */
    open class func uploadFileWithRequestBuilder(assetData: URL) -> RequestBuilder<AssetFileUploadResponseDto> {
        let localVariablePath = "/asset/upload"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "assetData": assetData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetFileUploadResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
