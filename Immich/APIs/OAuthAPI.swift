//
// OAuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OAuthAPI {

    /**

     - parameter oAuthCallbackDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callback(oAuthCallbackDto: OAuthCallbackDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: LoginResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return callbackWithRequestBuilder(oAuthCallbackDto: oAuthCallbackDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /oauth/callback
     - parameter oAuthCallbackDto: (body)  
     - returns: RequestBuilder<LoginResponseDto> 
     */
    open class func callbackWithRequestBuilder(oAuthCallbackDto: OAuthCallbackDto) -> RequestBuilder<LoginResponseDto> {
        let localVariablePath = "/oauth/callback"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthCallbackDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LoginResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter oAuthConfigDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func generateConfig(oAuthConfigDto: OAuthConfigDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: OAuthConfigResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return generateConfigWithRequestBuilder(oAuthConfigDto: oAuthConfigDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /oauth/config
     - parameter oAuthConfigDto: (body)  
     - returns: RequestBuilder<OAuthConfigResponseDto> 
     */
    open class func generateConfigWithRequestBuilder(oAuthConfigDto: OAuthConfigDto) -> RequestBuilder<OAuthConfigResponseDto> {
        let localVariablePath = "/oauth/config"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthConfigDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthConfigResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter oAuthCallbackDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func link(oAuthCallbackDto: OAuthCallbackDto, apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: UserResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return linkWithRequestBuilder(oAuthCallbackDto: oAuthCallbackDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /oauth/link
     - parameter oAuthCallbackDto: (body)  
     - returns: RequestBuilder<UserResponseDto> 
     */
    open class func linkWithRequestBuilder(oAuthCallbackDto: OAuthCallbackDto) -> RequestBuilder<UserResponseDto> {
        let localVariablePath = "/oauth/link"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthCallbackDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unlink(apiResponseQueue: DispatchQueue = ImmichAPI.apiResponseQueue, completion: @escaping ((_ data: UserResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return unlinkWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /oauth/unlink
     - returns: RequestBuilder<UserResponseDto> 
     */
    open class func unlinkWithRequestBuilder() -> RequestBuilder<UserResponseDto> {
        let localVariablePath = "/oauth/unlink"
        let localVariableURLString = ImmichAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserResponseDto>.Type = ImmichAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
